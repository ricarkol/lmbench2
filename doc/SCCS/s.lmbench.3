h04509
s 00177/00000/00000
d D 1.1 98/05/07 16:00:13 staelin 2 1
c lmbench.3 created on 98/05/07 16:00:13 by staelin@hpisc8.lempel
cC
cPdoc/lmbench.3
e
s 00000/00000/00000
d D 1.0 98/05/07 09:00:12 staelin 1 0
cHhpisc8.lempel
cP/users/staelin/src/lmbench/doc/lmbench.3
cR59c0c51f7abc65bc
cZ-07:00
c______________________________________________________________________
e
u
U
f e 0
f x 32
t
T
I 2
.\"
.\" @(#)lmbench.man	2.0 98/04/24
.\"
.\"   lmbench - benchmarking toolbox
.\"
.\"   Copyright (C) 1998  Carl Staelin and Larry McVoy
.\"   E-mail: staelin@hpl.hp.com
.\"
.TH "LMBENCH" 3 "$Date:$" "(c)1998 Larry McVoy" "LMBENCH"

.SH "NAME"
lmbench \- benchmarking toolbox

.SH "SYNOPSIS"
.B "#include ``lmbench.h''"
.LP
.B "BENCH(loop_body, enough)"
.LP
.B "BENCH1(loop_body, enough)"
.LP
.B "uint64	get_n()"
.LP
.B "void	milli(char *s, uint64 n)"
.LP
.B "void	micro(char *s, uint64 n)"
.LP
.B "void	nano(char *s, uint64 n)"
.lP
.B "void	mb(uint64 bytes)"
.LP
.B "void	kb(uint64 bytes)"

.SH "DESCRIPTION"
Creating benchmarks using the 
.I lmbench 
timing harness is easy.
Since it is so easy to measure performance using 
.I lmbench , 
it is possible to quickly answer questions that arise during system
design, development, or tuning.  For example, image processing 
.LP
There are two attributes that are critical for performance, latency 
and bandwidth, and 
.I lmbench's 
timing harness makes it easy to measure and report results for both.  
The measurement interface, 
.B BENCH 
and 
.BR BENCH1 , 
are identical, but the reporting functions are different.
Latency is usually important for frequently executed operations, and
bandwidth is usually important when moving large chunks of data.
.LP
There are a number of factors to consider when building benchmarks.
.LP
The timing harness requires that the benchmarked operation
be idempotent so that it can be repeated indefinitely.
.LP
The timing subsystem includes two macros, 
.B BENCH 
and 
.BR BENCH1 ,
which provide a uniform method for conducting experiments.  
.B BENCH1
does one experiment and saves the result, while 
.B BENCH 
does eleven
experiments and saves the median result.

.TP
.B "BENCH(loop_body, enough)"
measures the performance of 
.I loop_body
repeatedly and report the median result.

.TP
.B "BENCH1(loop_body, enough)"
measures the performance of 
.I loop_body
once.

.TP
.B "uint64	get_n()"
returns the number of times 
.I loop_body
was executed during the timing interval.

.TP
.B "void	milli(char *s, uint64 n)"
print out the time per operation in milli-seconds.  
.I n 
is the number of operations during the timing interval, which is passed 
as a parameter because each
.I loop_body
can contain several operations.

.TP
.B "void	micro(char *s, uint64 n)"
print the time per opertaion in micro-seconds.

.TP
.B "void	nano(char *s, uint64 n)"
print the time per operation in nano-seconds.

.TP
.B "void	mb(uint64 bytes)"
print the bandwidth in megabytes per second.

.TP
.B "void	kb(uint64 bytes)"
print the bandwidth in kilobytes per second.

.SH "USING lmbench"

Here is an example of a simple benchmark that measures the latency
of the random number generator 
.BR lrand48() :
.IP
.B "#include ``lmbench.h''"
.br
.B int
.br
.B "main(int argc, char *argv[])"
.br
.B {
.br
.B "	BENCH(lrand48(), 0);"
.br
.B "	micro("lrand48()", get_n());"
.br
.B "	exit(0);"
.br
.B }

.LP
Here is a simple benchmark that measures and reports the bandwidth of 
.B copy()
.IP
.B "#include ``lmbench.h''"
.br
.B int
.br
.B "main(int argc, char *argv[])"
.br
.B {
.br
.B "	char	*a = malloc(1024 * 1024);"
.br
.B "	char	*b = malloc(1024 * 1024);"
.br
.B "	BENCH(bcopy(a, b, 1024*1024), 0);"
.br
.B "	mb(get_n()*1024*1024);"
.br
.B "	exit(0);"
.br
.B }
.br


.SH "VARIABLES"
There are three environment variables that can be used to modify the 
.I lmbench
timing subsystem: ENOUGH, TIMING_O, and LOOP_O.

.SH "FUTURES"
Development of 
.I lmbench 
is continuing.  

.SH "SEE ALSO"
lmbench(8), timing(3), reporting(3), results(3).

.SH "AUTHOR"
Carl Staelin and Larry McVoy
.PP
Comments, suggestions, and bug reports are always welcome.
E 2
