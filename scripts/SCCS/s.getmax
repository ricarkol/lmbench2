h26853
s 00000/00000/00069
d D 1.10 00/01/31 15:29:41 lm 11 10
c Change mode to -rwxrwxr-x
cC
cO-rwxrwxr-x
e
s 00015/00004/00058
d D 1.9 97/10/31 18:00:01 lm 10 9
c New interface with results/Makefile
cC
cZ-08:00
e
s 00001/00000/00061
d D 1.8 97/07/12 18:08:46 lm 9 8
c naming & garbage from carl
e
s 00003/00000/00058
d D 1.7 97/07/09 01:22:18 lm 8 7
c noop option to do nothing.
cZ-07:00
e
s 00014/00005/00044
d D 1.6 97/02/12 19:32:38 lm 7 6
c *** empty log message ***
cZ-08:00
e
s 00003/00002/00046
d D 1.5 96/05/21 23:11:13 lm 6 5
c perl5
e
s 00001/00000/00047
d D 1.4 95/08/31 18:23:35 lm 5 4
c perl5
e
s 00005/00001/00042
d D 1.3 95/08/22 15:25:50 lm 4 3
c better vershbose output.
cZ-07:00
e
s 00019/00004/00024
d D 1.2 95/02/14 11:05:18 lm 3 2
c release 1.0.1
e
s 00028/00000/00000
d D 1.1 94/11/22 23:16:48 lm 2 1
c Initial revision
e
s 00000/00000/00000
d D 1.0 94/11/22 23:16:47 lm 1 0
cHlm.bitmover.com
cPscripts/getmax
cRb3fb9fe573436abf
cZ-08:00
c______________________________________________________________________
e
u
U
f e 0
f b
f x 34
t
lmbench1.0 release
T
I 2

# Look at a bunch of bargraph files and figure out the max amongst them all.
# Usage: getmax file file file....
#
# Hacked into existence by Larry McVoy (lm@sun.com now lm@sgi.com).
# Copyright (c) 1994 Larry McVoy.  GPLed software.
# $Id$
I 3

E 3
D 6
eval "exec perl -Ss $0 $*"
E 6
I 6
eval 'exec perl -Ssw $0 "$@"'
E 6
	if 0;

D 3
I 8
D 10
exit 0 if $noop;
E 10
I 10
$graph = 1 if 0;
$exit = 1;
foreach $file (@ARGV) {
	$exit = 0 if -f $file;
}
exit $exit if $noop;
E 10

$noop = 1 if 0;
E 8
$max = -1000000000;
E 3
I 3
$max_X = $max_Y = -1000000000;
$min_X = $min_Y = 1000000000;
E 3
foreach $file (@ARGV) {
I 7
	next if $rmmax;
E 7
D 10
	open(FD, $file);
E 10
I 10
	unless (open(FD, $file)) {
		warn "Can't open $file\n";
		next;
	}
E 10
	while (<FD>) {
I 3
		next if /^"/;
E 3
		next if /^%/;
I 3
		next if /^\s*$/;
E 3
D 6
I 9
		next if m|scripts/lmbench: /dev/tty|;
E 9
		split;
D 3
E 6
I 6
		@_ = split;
E 6
		$max = $_[0] if ($_[0] > $max);
E 3
I 3
		$min_X = $_[0] if ($_[0] < $min_X);
		$min_Y = $_[1] if ($_[1] < $min_Y);
		$max_X = $_[0] if ($_[0] > $max_X);
		$max_Y = $_[1] if ($_[1] > $max_Y);
E 3
	}
	close(FD);
}
I 4
I 6
$half = 0 if 0;	# lint
E 6
$max_X /= 2 if ($half);
E 4
foreach $file (@ARGV) {
D 10
	open(FD, $file);
E 10
I 10
	unless (open(FD, $file)) {
		warn "Can't open $file\n";
		next;
	}
E 10
	@lines = <FD>;
D 4
	open(FD, ">$file");
D 3
E 4
I 4
	open(FD, ">$file") || die "Can't open $file\n";
E 4
	print FD @lines;
	print FD "%fakemax $max\n";
E 3
I 3
	if ($graph) {
D 7
		print FD "\"%fakemin-X $min_X\n";
		print FD "\"%fakemin-Y $min_Y\n";
		print FD "\"%fakemax-X $max_X\n";
		print FD "\"%fakemax-Y $max_Y\n";
		print FD @lines;
I 4
E 7
I 7
		print FD "%fakemin-X $min_X\n";
		print FD "%fakemin-Y $min_Y\n";
		print FD "%fakemax-X $max_X\n";
		print FD "%fakemax-Y $max_Y\n";
		foreach $_ (@lines) {
			next if /^%fakem/;
			print FD;
		}
E 7
		warn "Max X is $max_X\n" if $v;
		warn "Max Y is $max_Y\n" if $v;
E 4
I 7
	} elsif ($rmmax) {
		foreach $_ (@lines) {
			next if /^%fakem/;
			print FD;
		}
E 7
	} else {
		print FD @lines;
		print FD "%fakemax $max_X\n";
I 4
		warn "Max X is $max_X\n" if $v;
E 4
	}
E 3
	close(FD);
}
E 2
I 5
D 10
exit 0;
E 5
E 10
I 10
exit $exit;
E 10
